        -:    0:Source:atom_warehouse.c
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:#include <unistd.h>
        -:    5:#include <errno.h>
        -:    6:#include <sys/socket.h>
        -:    7:#include <arpa/inet.h>
        -:    8:#include <netinet/in.h>
        -:    9:#include <sys/select.h>
        -:   10:#include <fcntl.h>
        -:   11:
        -:   12:#define MAX_ATOMS 1000000000000000000ULL
        -:   13:#define BUF_SIZE 1024
        -:   14:
        -:   15:unsigned long long carbon = 0, oxygen = 0, hydrogen = 0;
        -:   16:
        3:   17:void print_state() {
        3:   18:    printf("Warehouse State: CARBON=%llu OXYGEN=%llu HYDROGEN=%llu\n", carbon, oxygen, hydrogen);
        3:   19:    fflush(stdout);
        3:   20:}
        -:   21:
        5:   22:int handle_command(const char *buf) {
        -:   23:    unsigned long long num;
        5:   24:    if (sscanf(buf, "ADD CARBON %llu", &num) == 1) {
       1*:   25:        if (carbon + num > MAX_ATOMS) num = MAX_ATOMS - carbon;
        1:   26:        carbon += num;
        1:   27:        print_state();
        1:   28:        return 0;
        4:   29:    } else if (sscanf(buf, "ADD OXYGEN %llu", &num) == 1) {
       1*:   30:        if (oxygen + num > MAX_ATOMS) num = MAX_ATOMS - oxygen;
        1:   31:        oxygen += num;
        1:   32:        print_state();
        1:   33:        return 0;
        3:   34:    } else if (sscanf(buf, "ADD HYDROGEN %llu", &num) == 1) {
       1*:   35:        if (hydrogen + num > MAX_ATOMS) num = MAX_ATOMS - hydrogen;
        1:   36:        hydrogen += num;
        1:   37:        print_state();
        1:   38:        return 0;
        2:   39:    } else if (strncmp(buf, "EXIT", 4) == 0) {
        1:   40:        printf("Client requested to close its connection.\n");
        1:   41:        fflush(stdout);
        1:   42:        return 1;
        -:   43:    } else {
        1:   44:        fprintf(stderr, "Invalid command: %s", buf);
        1:   45:        fflush(stderr);
        1:   46:        return -1;
        -:   47:    }
        -:   48:}
        -:   49:
        2:   50:int main(int argc, char *argv[]) {
        2:   51:    if (argc != 2) {
        1:   52:        fprintf(stderr, "Usage: %s <port>\n", argv[0]);
        1:   53:        exit(1);
        -:   54:    }
        1:   55:    int port = atoi(argv[1]);
        1:   56:    int listen_fd = socket(AF_INET, SOCK_STREAM, 0);
       1*:   57:    if (listen_fd < 0) { perror("socket"); exit(1); }
        -:   58:
        -:   59:    struct sockaddr_in addr;
        1:   60:    memset(&addr, 0, sizeof(addr));
        1:   61:    addr.sin_family = AF_INET;
        1:   62:    addr.sin_addr.s_addr = INADDR_ANY;
        1:   63:    addr.sin_port = htons(port);
        -:   64:
        1:   65:    if (bind(listen_fd, (struct sockaddr*)&addr, sizeof(addr)) < 0) {
    #####:   66:        perror("bind"); close(listen_fd); exit(1);
        -:   67:    }
        -:   68:
        1:   69:    if (listen(listen_fd, 10) < 0) {
    #####:   70:        perror("listen"); close(listen_fd); exit(1);
        -:   71:    }
        -:   72:
        1:   73:    int flags = fcntl(STDIN_FILENO, F_GETFL, 0);
        1:   74:    fcntl(STDIN_FILENO, F_SETFL, flags | O_NONBLOCK);
        -:   75:
        -:   76:    fd_set master, read_fds;
        1:   77:    int fdmax = (listen_fd > STDIN_FILENO) ? listen_fd : STDIN_FILENO;
       17:   78:    FD_ZERO(&master);
        1:   79:    FD_SET(listen_fd, &master);
        1:   80:    FD_SET(STDIN_FILENO, &master);
        -:   81:
        1:   82:    printf("Warehouse server listening on port %d\n", port);
        1:   83:    printf("To close all connections type SHUTDOWN.\n");
        -:   84:
        1:   85:    int running = 1;
        9:   86:    while (running) {
        8:   87:        read_fds = master;
        8:   88:        if (select(fdmax+1, &read_fds, NULL, NULL, NULL) == -1) {
    #####:   89:            perror("select");
    #####:   90:            exit(1);
        -:   91:        }
       43:   92:        for (int i = 0; i <= fdmax; ++i) {
       36:   93:            if (FD_ISSET(i, &read_fds)) {
        8:   94:                if (i == listen_fd) {
        -:   95:                    
        -:   96:                    struct sockaddr_in client_addr;
        2:   97:                    socklen_t addrlen = sizeof(client_addr);
        2:   98:                    int newfd = accept(listen_fd, (struct sockaddr*)&client_addr, &addrlen);
       2*:   99:                    if (newfd == -1) { perror("accept"); continue; }
        2:  100:                    FD_SET(newfd, &master);
        2:  101:                    if (newfd > fdmax) fdmax = newfd;
        6:  102:                } else if (i == STDIN_FILENO) {
        -:  103:                    
        -:  104:                    char input_buf[BUF_SIZE];
        1:  105:                    if (fgets(input_buf, sizeof(input_buf), stdin)) {
        1:  106:                        if (strncmp(input_buf, "SHUTDOWN", 8) == 0) {
        1:  107:                            printf("Server shutting down by terminal command.\n");
        -:  108:                            
        6:  109:                            for (int j = 0; j <= fdmax; ++j) {
        5:  110:                                if (FD_ISSET(j, &master) && j != listen_fd && j != STDIN_FILENO) {
        1:  111:                                    close(j);
        1:  112:                                    FD_CLR(j, &master);
        -:  113:                                }
        -:  114:                            }
        1:  115:                            close(listen_fd);
        1:  116:                            running = 0;
        1:  117:                            break;
        -:  118:                        }
        -:  119:                    }
        -:  120:                } else {
        -:  121:                    
        -:  122:                    char buf[BUF_SIZE];
        5:  123:                    ssize_t nbytes = recv(i, buf, sizeof(buf)-1, 0);
        5:  124:                    if (nbytes <= 0) {
    #####:  125:                        close(i);
    #####:  126:                        FD_CLR(i, &master);
        -:  127:                    } else {
        5:  128:                        buf[nbytes] = '\0';
        5:  129:                        int res = handle_command(buf);
        5:  130:                        if (res == 1) { 
        1:  131:                            close(i);
        1:  132:                            FD_CLR(i, &master);
        -:  133:                        }
        -:  134:                    }
        -:  135:                }
        -:  136:            }
        -:  137:        }
        -:  138:    }
        1:  139:    printf("Server exited.\n");
        1:  140:    return 0;
        -:  141:}
